// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FloorProto.proto

package com.navatar.protobufs;

public final class FloorProto {
  private FloorProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface FloorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Floor)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    boolean hasNumber();
    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    int getNumber();

    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    java.util.List<com.navatar.protobufs.LandmarkProto.Landmark> 
        getLandmarksList();
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    com.navatar.protobufs.LandmarkProto.Landmark getLandmarks(int index);
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    int getLandmarksCount();

    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    java.util.List<com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> 
        getNavigableSpacesList();
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    com.navatar.protobufs.NavigableSpaceProto.NavigableSpace getNavigableSpaces(int index);
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    int getNavigableSpacesCount();

    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    boolean hasMinimap();
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    com.navatar.protobufs.MinimapProto.Minimap getMinimap();
  }
  /**
   * <pre>
   **
   * The protobuf definition for the Floor class.
   * </pre>
   *
   * Protobuf type {@code com.navatar.protobufs.Floor}
   */
  public  static final class Floor extends
      com.google.protobuf.GeneratedMessageLite<
          Floor, Floor.Builder> implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Floor)
      FloorOrBuilder {
    private Floor() {
      landmarks_ = emptyProtobufList();
      navigableSpaces_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int NUMBER_FIELD_NUMBER = 1;
    private int number_;
    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    public boolean hasNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    public int getNumber() {
      return number_;
    }
    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    private void setNumber(int value) {
      bitField0_ |= 0x00000001;
      number_ = value;
    }
    /**
     * <pre>
     * The floor's number. 
     * </pre>
     *
     * <code>optional int32 number = 1;</code>
     */
    private void clearNumber() {
      bitField0_ = (bitField0_ & ~0x00000001);
      number_ = 0;
    }

    public static final int LANDMARKS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<com.navatar.protobufs.LandmarkProto.Landmark> landmarks_;
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    public java.util.List<com.navatar.protobufs.LandmarkProto.Landmark> getLandmarksList() {
      return landmarks_;
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    public java.util.List<? extends com.navatar.protobufs.LandmarkProto.LandmarkOrBuilder> 
        getLandmarksOrBuilderList() {
      return landmarks_;
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    public int getLandmarksCount() {
      return landmarks_.size();
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    public com.navatar.protobufs.LandmarkProto.Landmark getLandmarks(int index) {
      return landmarks_.get(index);
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    public com.navatar.protobufs.LandmarkProto.LandmarkOrBuilder getLandmarksOrBuilder(
        int index) {
      return landmarks_.get(index);
    }
    private void ensureLandmarksIsMutable() {
      if (!landmarks_.isModifiable()) {
        landmarks_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(landmarks_);
       }
    }

    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void setLandmarks(
        int index, com.navatar.protobufs.LandmarkProto.Landmark value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLandmarksIsMutable();
      landmarks_.set(index, value);
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void setLandmarks(
        int index, com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
      ensureLandmarksIsMutable();
      landmarks_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void addLandmarks(com.navatar.protobufs.LandmarkProto.Landmark value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLandmarksIsMutable();
      landmarks_.add(value);
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void addLandmarks(
        int index, com.navatar.protobufs.LandmarkProto.Landmark value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureLandmarksIsMutable();
      landmarks_.add(index, value);
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void addLandmarks(
        com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
      ensureLandmarksIsMutable();
      landmarks_.add(builderForValue.build());
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void addLandmarks(
        int index, com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
      ensureLandmarksIsMutable();
      landmarks_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void addAllLandmarks(
        java.lang.Iterable<? extends com.navatar.protobufs.LandmarkProto.Landmark> values) {
      ensureLandmarksIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, landmarks_);
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void clearLandmarks() {
      landmarks_ = emptyProtobufList();
    }
    /**
     * <pre>
     * This floor's landmarks. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
     */
    private void removeLandmarks(int index) {
      ensureLandmarksIsMutable();
      landmarks_.remove(index);
    }

    public static final int NAVIGABLESPACES_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> navigableSpaces_;
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    public java.util.List<com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> getNavigableSpacesList() {
      return navigableSpaces_;
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    public java.util.List<? extends com.navatar.protobufs.NavigableSpaceProto.NavigableSpaceOrBuilder> 
        getNavigableSpacesOrBuilderList() {
      return navigableSpaces_;
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    public int getNavigableSpacesCount() {
      return navigableSpaces_.size();
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    public com.navatar.protobufs.NavigableSpaceProto.NavigableSpace getNavigableSpaces(int index) {
      return navigableSpaces_.get(index);
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    public com.navatar.protobufs.NavigableSpaceProto.NavigableSpaceOrBuilder getNavigableSpacesOrBuilder(
        int index) {
      return navigableSpaces_.get(index);
    }
    private void ensureNavigableSpacesIsMutable() {
      if (!navigableSpaces_.isModifiable()) {
        navigableSpaces_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(navigableSpaces_);
       }
    }

    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void setNavigableSpaces(
        int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.set(index, value);
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void setNavigableSpaces(
        int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void addNavigableSpaces(com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.add(value);
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void addNavigableSpaces(
        int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.add(index, value);
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void addNavigableSpaces(
        com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.add(builderForValue.build());
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void addNavigableSpaces(
        int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void addAllNavigableSpaces(
        java.lang.Iterable<? extends com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> values) {
      ensureNavigableSpacesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, navigableSpaces_);
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void clearNavigableSpaces() {
      navigableSpaces_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The navigable spaces of this floor. 
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
     */
    private void removeNavigableSpaces(int index) {
      ensureNavigableSpacesIsMutable();
      navigableSpaces_.remove(index);
    }

    public static final int MINIMAP_FIELD_NUMBER = 4;
    private com.navatar.protobufs.MinimapProto.Minimap minimap_;
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    public boolean hasMinimap() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    public com.navatar.protobufs.MinimapProto.Minimap getMinimap() {
      return minimap_ == null ? com.navatar.protobufs.MinimapProto.Minimap.getDefaultInstance() : minimap_;
    }
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    private void setMinimap(com.navatar.protobufs.MinimapProto.Minimap value) {
      if (value == null) {
        throw new NullPointerException();
      }
      minimap_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    private void setMinimap(
        com.navatar.protobufs.MinimapProto.Minimap.Builder builderForValue) {
      minimap_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    private void mergeMinimap(com.navatar.protobufs.MinimapProto.Minimap value) {
      if (minimap_ != null &&
          minimap_ != com.navatar.protobufs.MinimapProto.Minimap.getDefaultInstance()) {
        minimap_ =
          com.navatar.protobufs.MinimapProto.Minimap.newBuilder(minimap_).mergeFrom(value).buildPartial();
      } else {
        minimap_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * The minimap representing the navigability of this floor. 
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
     */
    private void clearMinimap() {  minimap_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, number_);
      }
      for (int i = 0; i < landmarks_.size(); i++) {
        output.writeMessage(2, landmarks_.get(i));
      }
      for (int i = 0; i < navigableSpaces_.size(); i++) {
        output.writeMessage(3, navigableSpaces_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(4, getMinimap());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, number_);
      }
      for (int i = 0; i < landmarks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, landmarks_.get(i));
      }
      for (int i = 0; i < navigableSpaces_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, navigableSpaces_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getMinimap());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.FloorProto.Floor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.navatar.protobufs.FloorProto.Floor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     * The protobuf definition for the Floor class.
     * </pre>
     *
     * Protobuf type {@code com.navatar.protobufs.Floor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.navatar.protobufs.FloorProto.Floor, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Floor)
        com.navatar.protobufs.FloorProto.FloorOrBuilder {
      // Construct using com.navatar.protobufs.FloorProto.Floor.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The floor's number. 
       * </pre>
       *
       * <code>optional int32 number = 1;</code>
       */
      public boolean hasNumber() {
        return instance.hasNumber();
      }
      /**
       * <pre>
       * The floor's number. 
       * </pre>
       *
       * <code>optional int32 number = 1;</code>
       */
      public int getNumber() {
        return instance.getNumber();
      }
      /**
       * <pre>
       * The floor's number. 
       * </pre>
       *
       * <code>optional int32 number = 1;</code>
       */
      public Builder setNumber(int value) {
        copyOnWrite();
        instance.setNumber(value);
        return this;
      }
      /**
       * <pre>
       * The floor's number. 
       * </pre>
       *
       * <code>optional int32 number = 1;</code>
       */
      public Builder clearNumber() {
        copyOnWrite();
        instance.clearNumber();
        return this;
      }

      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public java.util.List<com.navatar.protobufs.LandmarkProto.Landmark> getLandmarksList() {
        return java.util.Collections.unmodifiableList(
            instance.getLandmarksList());
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public int getLandmarksCount() {
        return instance.getLandmarksCount();
      }/**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public com.navatar.protobufs.LandmarkProto.Landmark getLandmarks(int index) {
        return instance.getLandmarks(index);
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder setLandmarks(
          int index, com.navatar.protobufs.LandmarkProto.Landmark value) {
        copyOnWrite();
        instance.setLandmarks(index, value);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder setLandmarks(
          int index, com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
        copyOnWrite();
        instance.setLandmarks(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder addLandmarks(com.navatar.protobufs.LandmarkProto.Landmark value) {
        copyOnWrite();
        instance.addLandmarks(value);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder addLandmarks(
          int index, com.navatar.protobufs.LandmarkProto.Landmark value) {
        copyOnWrite();
        instance.addLandmarks(index, value);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder addLandmarks(
          com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
        copyOnWrite();
        instance.addLandmarks(builderForValue);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder addLandmarks(
          int index, com.navatar.protobufs.LandmarkProto.Landmark.Builder builderForValue) {
        copyOnWrite();
        instance.addLandmarks(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder addAllLandmarks(
          java.lang.Iterable<? extends com.navatar.protobufs.LandmarkProto.Landmark> values) {
        copyOnWrite();
        instance.addAllLandmarks(values);
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder clearLandmarks() {
        copyOnWrite();
        instance.clearLandmarks();
        return this;
      }
      /**
       * <pre>
       * This floor's landmarks. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Landmark landmarks = 2;</code>
       */
      public Builder removeLandmarks(int index) {
        copyOnWrite();
        instance.removeLandmarks(index);
        return this;
      }

      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public java.util.List<com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> getNavigableSpacesList() {
        return java.util.Collections.unmodifiableList(
            instance.getNavigableSpacesList());
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public int getNavigableSpacesCount() {
        return instance.getNavigableSpacesCount();
      }/**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public com.navatar.protobufs.NavigableSpaceProto.NavigableSpace getNavigableSpaces(int index) {
        return instance.getNavigableSpaces(index);
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder setNavigableSpaces(
          int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
        copyOnWrite();
        instance.setNavigableSpaces(index, value);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder setNavigableSpaces(
          int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
        copyOnWrite();
        instance.setNavigableSpaces(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder addNavigableSpaces(com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
        copyOnWrite();
        instance.addNavigableSpaces(value);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder addNavigableSpaces(
          int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace value) {
        copyOnWrite();
        instance.addNavigableSpaces(index, value);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder addNavigableSpaces(
          com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
        copyOnWrite();
        instance.addNavigableSpaces(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder addNavigableSpaces(
          int index, com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.Builder builderForValue) {
        copyOnWrite();
        instance.addNavigableSpaces(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder addAllNavigableSpaces(
          java.lang.Iterable<? extends com.navatar.protobufs.NavigableSpaceProto.NavigableSpace> values) {
        copyOnWrite();
        instance.addAllNavigableSpaces(values);
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder clearNavigableSpaces() {
        copyOnWrite();
        instance.clearNavigableSpaces();
        return this;
      }
      /**
       * <pre>
       * The navigable spaces of this floor. 
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.NavigableSpace navigableSpaces = 3;</code>
       */
      public Builder removeNavigableSpaces(int index) {
        copyOnWrite();
        instance.removeNavigableSpaces(index);
        return this;
      }

      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public boolean hasMinimap() {
        return instance.hasMinimap();
      }
      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public com.navatar.protobufs.MinimapProto.Minimap getMinimap() {
        return instance.getMinimap();
      }
      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public Builder setMinimap(com.navatar.protobufs.MinimapProto.Minimap value) {
        copyOnWrite();
        instance.setMinimap(value);
        return this;
        }
      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public Builder setMinimap(
          com.navatar.protobufs.MinimapProto.Minimap.Builder builderForValue) {
        copyOnWrite();
        instance.setMinimap(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public Builder mergeMinimap(com.navatar.protobufs.MinimapProto.Minimap value) {
        copyOnWrite();
        instance.mergeMinimap(value);
        return this;
      }
      /**
       * <pre>
       * The minimap representing the navigability of this floor. 
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Minimap minimap = 4;</code>
       */
      public Builder clearMinimap() {  copyOnWrite();
        instance.clearMinimap();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Floor)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.navatar.protobufs.FloorProto.Floor();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          landmarks_.makeImmutable();
          navigableSpaces_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.navatar.protobufs.FloorProto.Floor other = (com.navatar.protobufs.FloorProto.Floor) arg1;
          number_ = visitor.visitInt(
              hasNumber(), number_,
              other.hasNumber(), other.number_);
          landmarks_= visitor.visitList(landmarks_, other.landmarks_);
          navigableSpaces_= visitor.visitList(navigableSpaces_, other.navigableSpaces_);
          minimap_ = visitor.visitMessage(minimap_, other.minimap_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  number_ = input.readInt32();
                  break;
                }
                case 18: {
                  if (!landmarks_.isModifiable()) {
                    landmarks_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(landmarks_);
                  }
                  landmarks_.add(
                      input.readMessage(com.navatar.protobufs.LandmarkProto.Landmark.parser(), extensionRegistry));
                  break;
                }
                case 26: {
                  if (!navigableSpaces_.isModifiable()) {
                    navigableSpaces_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(navigableSpaces_);
                  }
                  navigableSpaces_.add(
                      input.readMessage(com.navatar.protobufs.NavigableSpaceProto.NavigableSpace.parser(), extensionRegistry));
                  break;
                }
                case 34: {
                  com.navatar.protobufs.MinimapProto.Minimap.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = minimap_.toBuilder();
                  }
                  minimap_ = input.readMessage(com.navatar.protobufs.MinimapProto.Minimap.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(minimap_);
                    minimap_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.navatar.protobufs.FloorProto.Floor.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Floor)
    private static final com.navatar.protobufs.FloorProto.Floor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Floor();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.navatar.protobufs.FloorProto.Floor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Floor> PARSER;

    public static com.google.protobuf.Parser<Floor> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
