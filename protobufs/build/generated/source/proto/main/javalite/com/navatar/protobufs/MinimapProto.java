// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MinimapProto.proto

package com.navatar.protobufs;

public final class MinimapProto {
  private MinimapProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface MinimapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Minimap)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    boolean hasSideSize();
    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    double getSideSize();

    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    boolean hasRows();
    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    int getRows();

    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    boolean hasColumns();
    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    int getColumns();

    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    boolean hasMinCoordinates();
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates();

    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> 
        getTilesList();
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index);
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    int getTilesCount();
  }
  /**
   * <pre>
   **
   * The protobuf definition for the Minimap class. Minimaps are used in the Floor protobuf class
   * in order to speed up landmark search and help discretize navigation.
   * </pre>
   *
   * Protobuf type {@code com.navatar.protobufs.Minimap}
   */
  public  static final class Minimap extends
      com.google.protobuf.GeneratedMessageLite<
          Minimap, Minimap.Builder> implements
      // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Minimap)
      MinimapOrBuilder {
    private Minimap() {
      tiles_ = emptyProtobufList();
    }
    public interface TileOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.navatar.protobufs.Minimap.Tile)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      boolean hasRow();
      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      int getRow();

      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      boolean hasColumn();
      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      int getColumn();

      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      java.util.List<java.lang.Integer> getLandmarksList();
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      int getLandmarksCount();
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      int getLandmarks(int index);
    }
    /**
     * <pre>
     **
     * The tiles used in minimap that a hold landmark information for a discreet amount of space.
     * </pre>
     *
     * Protobuf type {@code com.navatar.protobufs.Minimap.Tile}
     */
    public  static final class Tile extends
        com.google.protobuf.GeneratedMessageLite<
            Tile, Tile.Builder> implements
        // @@protoc_insertion_point(message_implements:com.navatar.protobufs.Minimap.Tile)
        TileOrBuilder {
      private Tile() {
        landmarks_ = emptyIntList();
      }
      private int bitField0_;
      public static final int ROW_FIELD_NUMBER = 1;
      private int row_;
      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      public boolean hasRow() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      public int getRow() {
        return row_;
      }
      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      private void setRow(int value) {
        bitField0_ |= 0x00000001;
        row_ = value;
      }
      /**
       * <pre>
       * The tile's row it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 row = 1;</code>
       */
      private void clearRow() {
        bitField0_ = (bitField0_ & ~0x00000001);
        row_ = 0;
      }

      public static final int COLUMN_FIELD_NUMBER = 2;
      private int column_;
      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      public boolean hasColumn() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      public int getColumn() {
        return column_;
      }
      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      private void setColumn(int value) {
        bitField0_ |= 0x00000002;
        column_ = value;
      }
      /**
       * <pre>
       * The tile's column it is placed in the minimap.
       * </pre>
       *
       * <code>optional int32 column = 2;</code>
       */
      private void clearColumn() {
        bitField0_ = (bitField0_ & ~0x00000002);
        column_ = 0;
      }

      public static final int LANDMARKS_FIELD_NUMBER = 3;
      private com.google.protobuf.Internal.IntList landmarks_;
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getLandmarksList() {
        return landmarks_;
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      public int getLandmarksCount() {
        return landmarks_.size();
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      public int getLandmarks(int index) {
        return landmarks_.getInt(index);
      }
      private void ensureLandmarksIsMutable() {
        if (!landmarks_.isModifiable()) {
          landmarks_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(landmarks_);
         }
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      private void setLandmarks(
          int index, int value) {
        ensureLandmarksIsMutable();
        landmarks_.setInt(index, value);
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      private void addLandmarks(int value) {
        ensureLandmarksIsMutable();
        landmarks_.addInt(value);
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      private void addAllLandmarks(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLandmarksIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, landmarks_);
      }
      /**
       * <pre>
       * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
       * collection of landmarks stored in the corresponding floor.
       * </pre>
       *
       * <code>repeated int32 landmarks = 3;</code>
       */
      private void clearLandmarks() {
        landmarks_ = emptyIntList();
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, row_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, column_);
        }
        for (int i = 0; i < landmarks_.size(); i++) {
          output.writeInt32(3, landmarks_.getInt(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, row_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, column_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < landmarks_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(landmarks_.getInt(i));
          }
          size += dataSize;
          size += 1 * getLandmarksList().size();
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.navatar.protobufs.MinimapProto.Minimap.Tile parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.navatar.protobufs.MinimapProto.Minimap.Tile prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * <pre>
       **
       * The tiles used in minimap that a hold landmark information for a discreet amount of space.
       * </pre>
       *
       * Protobuf type {@code com.navatar.protobufs.Minimap.Tile}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.navatar.protobufs.MinimapProto.Minimap.Tile, Builder> implements
          // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Minimap.Tile)
          com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder {
        // Construct using com.navatar.protobufs.MinimapProto.Minimap.Tile.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 row = 1;</code>
         */
        public boolean hasRow() {
          return instance.hasRow();
        }
        /**
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 row = 1;</code>
         */
        public int getRow() {
          return instance.getRow();
        }
        /**
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 row = 1;</code>
         */
        public Builder setRow(int value) {
          copyOnWrite();
          instance.setRow(value);
          return this;
        }
        /**
         * <pre>
         * The tile's row it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 row = 1;</code>
         */
        public Builder clearRow() {
          copyOnWrite();
          instance.clearRow();
          return this;
        }

        /**
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 column = 2;</code>
         */
        public boolean hasColumn() {
          return instance.hasColumn();
        }
        /**
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 column = 2;</code>
         */
        public int getColumn() {
          return instance.getColumn();
        }
        /**
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 column = 2;</code>
         */
        public Builder setColumn(int value) {
          copyOnWrite();
          instance.setColumn(value);
          return this;
        }
        /**
         * <pre>
         * The tile's column it is placed in the minimap.
         * </pre>
         *
         * <code>optional int32 column = 2;</code>
         */
        public Builder clearColumn() {
          copyOnWrite();
          instance.clearColumn();
          return this;
        }

        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public java.util.List<java.lang.Integer>
            getLandmarksList() {
          return java.util.Collections.unmodifiableList(
              instance.getLandmarksList());
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public int getLandmarksCount() {
          return instance.getLandmarksCount();
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public int getLandmarks(int index) {
          return instance.getLandmarks(index);
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public Builder setLandmarks(
            int index, int value) {
          copyOnWrite();
          instance.setLandmarks(index, value);
          return this;
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public Builder addLandmarks(int value) {
          copyOnWrite();
          instance.addLandmarks(value);
          return this;
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public Builder addAllLandmarks(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          copyOnWrite();
          instance.addAllLandmarks(values);
          return this;
        }
        /**
         * <pre>
         * The closest landmarks to this tile. This is the index of the corresponding landmark in the 
         * collection of landmarks stored in the corresponding floor.
         * </pre>
         *
         * <code>repeated int32 landmarks = 3;</code>
         */
        public Builder clearLandmarks() {
          copyOnWrite();
          instance.clearLandmarks();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Minimap.Tile)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.navatar.protobufs.MinimapProto.Minimap.Tile();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            landmarks_.makeImmutable();
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            com.navatar.protobufs.MinimapProto.Minimap.Tile other = (com.navatar.protobufs.MinimapProto.Minimap.Tile) arg1;
            row_ = visitor.visitInt(
                hasRow(), row_,
                other.hasRow(), other.row_);
            column_ = visitor.visitInt(
                hasColumn(), column_,
                other.hasColumn(), other.column_);
            landmarks_= visitor.visitIntList(landmarks_, other.landmarks_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 8: {
                    bitField0_ |= 0x00000001;
                    row_ = input.readInt32();
                    break;
                  }
                  case 16: {
                    bitField0_ |= 0x00000002;
                    column_ = input.readInt32();
                    break;
                  }
                  case 24: {
                    if (!landmarks_.isModifiable()) {
                      landmarks_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(landmarks_);
                    }
                    landmarks_.addInt(input.readInt32());
                    break;
                  }
                  case 26: {
                    int length = input.readRawVarint32();
                    int limit = input.pushLimit(length);
                    if (!landmarks_.isModifiable() && input.getBytesUntilLimit() > 0) {
                      landmarks_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(landmarks_);
                    }
                    while (input.getBytesUntilLimit() > 0) {
                      landmarks_.addInt(input.readInt32());
                    }
                    input.popLimit(limit);
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (com.navatar.protobufs.MinimapProto.Minimap.Tile.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Minimap.Tile)
      private static final com.navatar.protobufs.MinimapProto.Minimap.Tile DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Tile();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static com.navatar.protobufs.MinimapProto.Minimap.Tile getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Tile> PARSER;

      public static com.google.protobuf.Parser<Tile> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int SIDESIZE_FIELD_NUMBER = 1;
    private double sideSize_;
    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    public boolean hasSideSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    public double getSideSize() {
      return sideSize_;
    }
    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    private void setSideSize(double value) {
      bitField0_ |= 0x00000001;
      sideSize_ = value;
    }
    /**
     * <pre>
     * The size of the minimap's tile's side.
     * </pre>
     *
     * <code>optional double sideSize = 1;</code>
     */
    private void clearSideSize() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sideSize_ = 0D;
    }

    public static final int ROWS_FIELD_NUMBER = 2;
    private int rows_;
    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    public boolean hasRows() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    public int getRows() {
      return rows_;
    }
    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    private void setRows(int value) {
      bitField0_ |= 0x00000002;
      rows_ = value;
    }
    /**
     * <pre>
     * The number of rows in the minimap.
     * </pre>
     *
     * <code>optional int32 rows = 2;</code>
     */
    private void clearRows() {
      bitField0_ = (bitField0_ & ~0x00000002);
      rows_ = 0;
    }

    public static final int COLUMNS_FIELD_NUMBER = 3;
    private int columns_;
    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    public boolean hasColumns() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    public int getColumns() {
      return columns_;
    }
    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    private void setColumns(int value) {
      bitField0_ |= 0x00000004;
      columns_ = value;
    }
    /**
     * <pre>
     * The number of columns in the minimap.
     * </pre>
     *
     * <code>optional int32 columns = 3;</code>
     */
    private void clearColumns() {
      bitField0_ = (bitField0_ & ~0x00000004);
      columns_ = 0;
    }

    public static final int MINCOORDINATES_FIELD_NUMBER = 4;
    private com.navatar.protobufs.CoordinatesProto.Coordinates minCoordinates_;
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    public boolean hasMinCoordinates() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    public com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates() {
      return minCoordinates_ == null ? com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance() : minCoordinates_;
    }
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    private void setMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
      if (value == null) {
        throw new NullPointerException();
      }
      minCoordinates_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    private void setMinCoordinates(
        com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
      minCoordinates_ = builderForValue.build();
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    private void mergeMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
      if (minCoordinates_ != null &&
          minCoordinates_ != com.navatar.protobufs.CoordinatesProto.Coordinates.getDefaultInstance()) {
        minCoordinates_ =
          com.navatar.protobufs.CoordinatesProto.Coordinates.newBuilder(minCoordinates_).mergeFrom(value).buildPartial();
      } else {
        minCoordinates_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * The minimap's minimum coordinates. *&#47;
     * </pre>
     *
     * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
     */
    private void clearMinCoordinates() {  minCoordinates_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int TILES_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<com.navatar.protobufs.MinimapProto.Minimap.Tile> tiles_;
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    public java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> getTilesList() {
      return tiles_;
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    public java.util.List<? extends com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder> 
        getTilesOrBuilderList() {
      return tiles_;
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    public com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index) {
      return tiles_.get(index);
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    public com.navatar.protobufs.MinimapProto.Minimap.TileOrBuilder getTilesOrBuilder(
        int index) {
      return tiles_.get(index);
    }
    private void ensureTilesIsMutable() {
      if (!tiles_.isModifiable()) {
        tiles_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tiles_);
       }
    }

    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void setTiles(
        int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTilesIsMutable();
      tiles_.set(index, value);
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void setTiles(
        int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
      ensureTilesIsMutable();
      tiles_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void addTiles(com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTilesIsMutable();
      tiles_.add(value);
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void addTiles(
        int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTilesIsMutable();
      tiles_.add(index, value);
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void addTiles(
        com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
      ensureTilesIsMutable();
      tiles_.add(builderForValue.build());
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void addTiles(
        int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
      ensureTilesIsMutable();
      tiles_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void addAllTiles(
        java.lang.Iterable<? extends com.navatar.protobufs.MinimapProto.Minimap.Tile> values) {
      ensureTilesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, tiles_);
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void clearTiles() {
      tiles_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The tiles of the minimap.
     * </pre>
     *
     * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
     */
    private void removeTiles(int index) {
      ensureTilesIsMutable();
      tiles_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, sideSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, rows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, columns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getMinCoordinates());
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeMessage(5, tiles_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, sideSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, columns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getMinCoordinates());
      }
      for (int i = 0; i < tiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, tiles_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.navatar.protobufs.MinimapProto.Minimap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.navatar.protobufs.MinimapProto.Minimap prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     * The protobuf definition for the Minimap class. Minimaps are used in the Floor protobuf class
     * in order to speed up landmark search and help discretize navigation.
     * </pre>
     *
     * Protobuf type {@code com.navatar.protobufs.Minimap}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.navatar.protobufs.MinimapProto.Minimap, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.navatar.protobufs.Minimap)
        com.navatar.protobufs.MinimapProto.MinimapOrBuilder {
      // Construct using com.navatar.protobufs.MinimapProto.Minimap.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       *
       * <code>optional double sideSize = 1;</code>
       */
      public boolean hasSideSize() {
        return instance.hasSideSize();
      }
      /**
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       *
       * <code>optional double sideSize = 1;</code>
       */
      public double getSideSize() {
        return instance.getSideSize();
      }
      /**
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       *
       * <code>optional double sideSize = 1;</code>
       */
      public Builder setSideSize(double value) {
        copyOnWrite();
        instance.setSideSize(value);
        return this;
      }
      /**
       * <pre>
       * The size of the minimap's tile's side.
       * </pre>
       *
       * <code>optional double sideSize = 1;</code>
       */
      public Builder clearSideSize() {
        copyOnWrite();
        instance.clearSideSize();
        return this;
      }

      /**
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       *
       * <code>optional int32 rows = 2;</code>
       */
      public boolean hasRows() {
        return instance.hasRows();
      }
      /**
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       *
       * <code>optional int32 rows = 2;</code>
       */
      public int getRows() {
        return instance.getRows();
      }
      /**
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       *
       * <code>optional int32 rows = 2;</code>
       */
      public Builder setRows(int value) {
        copyOnWrite();
        instance.setRows(value);
        return this;
      }
      /**
       * <pre>
       * The number of rows in the minimap.
       * </pre>
       *
       * <code>optional int32 rows = 2;</code>
       */
      public Builder clearRows() {
        copyOnWrite();
        instance.clearRows();
        return this;
      }

      /**
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       *
       * <code>optional int32 columns = 3;</code>
       */
      public boolean hasColumns() {
        return instance.hasColumns();
      }
      /**
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       *
       * <code>optional int32 columns = 3;</code>
       */
      public int getColumns() {
        return instance.getColumns();
      }
      /**
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       *
       * <code>optional int32 columns = 3;</code>
       */
      public Builder setColumns(int value) {
        copyOnWrite();
        instance.setColumns(value);
        return this;
      }
      /**
       * <pre>
       * The number of columns in the minimap.
       * </pre>
       *
       * <code>optional int32 columns = 3;</code>
       */
      public Builder clearColumns() {
        copyOnWrite();
        instance.clearColumns();
        return this;
      }

      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public boolean hasMinCoordinates() {
        return instance.hasMinCoordinates();
      }
      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public com.navatar.protobufs.CoordinatesProto.Coordinates getMinCoordinates() {
        return instance.getMinCoordinates();
      }
      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public Builder setMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        copyOnWrite();
        instance.setMinCoordinates(value);
        return this;
        }
      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public Builder setMinCoordinates(
          com.navatar.protobufs.CoordinatesProto.Coordinates.Builder builderForValue) {
        copyOnWrite();
        instance.setMinCoordinates(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public Builder mergeMinCoordinates(com.navatar.protobufs.CoordinatesProto.Coordinates value) {
        copyOnWrite();
        instance.mergeMinCoordinates(value);
        return this;
      }
      /**
       * <pre>
       * The minimap's minimum coordinates. *&#47;
       * </pre>
       *
       * <code>optional .com.navatar.protobufs.Coordinates minCoordinates = 4;</code>
       */
      public Builder clearMinCoordinates() {  copyOnWrite();
        instance.clearMinCoordinates();
        return this;
      }

      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public java.util.List<com.navatar.protobufs.MinimapProto.Minimap.Tile> getTilesList() {
        return java.util.Collections.unmodifiableList(
            instance.getTilesList());
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public int getTilesCount() {
        return instance.getTilesCount();
      }/**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public com.navatar.protobufs.MinimapProto.Minimap.Tile getTiles(int index) {
        return instance.getTiles(index);
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder setTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        copyOnWrite();
        instance.setTiles(index, value);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder setTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        copyOnWrite();
        instance.setTiles(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder addTiles(com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        copyOnWrite();
        instance.addTiles(value);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder addTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile value) {
        copyOnWrite();
        instance.addTiles(index, value);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder addTiles(
          com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        copyOnWrite();
        instance.addTiles(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder addTiles(
          int index, com.navatar.protobufs.MinimapProto.Minimap.Tile.Builder builderForValue) {
        copyOnWrite();
        instance.addTiles(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends com.navatar.protobufs.MinimapProto.Minimap.Tile> values) {
        copyOnWrite();
        instance.addAllTiles(values);
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder clearTiles() {
        copyOnWrite();
        instance.clearTiles();
        return this;
      }
      /**
       * <pre>
       * The tiles of the minimap.
       * </pre>
       *
       * <code>repeated .com.navatar.protobufs.Minimap.Tile tiles = 5;</code>
       */
      public Builder removeTiles(int index) {
        copyOnWrite();
        instance.removeTiles(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.navatar.protobufs.Minimap)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.navatar.protobufs.MinimapProto.Minimap();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          tiles_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.navatar.protobufs.MinimapProto.Minimap other = (com.navatar.protobufs.MinimapProto.Minimap) arg1;
          sideSize_ = visitor.visitDouble(
              hasSideSize(), sideSize_,
              other.hasSideSize(), other.sideSize_);
          rows_ = visitor.visitInt(
              hasRows(), rows_,
              other.hasRows(), other.rows_);
          columns_ = visitor.visitInt(
              hasColumns(), columns_,
              other.hasColumns(), other.columns_);
          minCoordinates_ = visitor.visitMessage(minCoordinates_, other.minCoordinates_);
          tiles_= visitor.visitList(tiles_, other.tiles_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 9: {
                  bitField0_ |= 0x00000001;
                  sideSize_ = input.readDouble();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  rows_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  columns_ = input.readInt32();
                  break;
                }
                case 34: {
                  com.navatar.protobufs.CoordinatesProto.Coordinates.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000008) == 0x00000008)) {
                    subBuilder = minCoordinates_.toBuilder();
                  }
                  minCoordinates_ = input.readMessage(com.navatar.protobufs.CoordinatesProto.Coordinates.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(minCoordinates_);
                    minCoordinates_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000008;
                  break;
                }
                case 42: {
                  if (!tiles_.isModifiable()) {
                    tiles_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(tiles_);
                  }
                  tiles_.add(
                      input.readMessage(com.navatar.protobufs.MinimapProto.Minimap.Tile.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.navatar.protobufs.MinimapProto.Minimap.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.navatar.protobufs.Minimap)
    private static final com.navatar.protobufs.MinimapProto.Minimap DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Minimap();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.navatar.protobufs.MinimapProto.Minimap getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Minimap> PARSER;

    public static com.google.protobuf.Parser<Minimap> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
